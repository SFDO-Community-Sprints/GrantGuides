name: beta release

on:
  push:
    branches:
      - 'main'
    paths-ignore:
      - 'docs/**'
      - 'README.md'
      
jobs:
  unit_tests:
    name: "Run Beta release"
    runs-on: ubuntu-latest
    steps:
      # Install Salesforce CLI
      - name: 'Install Salesforce CLI'
        run: |
            npm install @salesforce/cli --location=global
            nodeInstallPath=$(npm config get prefix)
            echo "$nodeInstallPath/bin" >> $GITHUB_PATH
            sf --version

      # Checkout the source code
      - name: 'Checkout source code'
        uses: actions/checkout@v4

      # Store secret for dev hub
      - name: 'Populate auth file with DEV_HUB_AUTH secret'
        shell: bash
        run: |
            echo ${{ secrets.DEV_HUB_AUTH}} > ./DEV_HUB_AUTH.txt
            secretFileSize=$(wc -c "./DEV_HUB_AUTH.txt" | awk '{print $1}')
            if [ $secretFileSize == 1 ]; then
                echo "Missing DEV_HUB_AUTH secret. Is this workflow running on a fork?";
                exit 1;
            fi

      # Authenticate dev hub
      - name: 'Authenticate Dev Hub'
        run: sf org login sfdx-url -f ./DEV_HUB_AUTH.txt -a devhub -d

      # Remove auth file
      - name: 'Remove auth file'
        run: rm -f ./DEV_HUB_AUTH.txt
      
      #Create Package Version
      - name: "Create package version"
        id: createPackageVersion
        run: |
          set +e
          json=$(sf package version create -p "Grants Content Kit" -x -f config/project-scratch-def.json -w 10 -b main -c --json)
          echo $json
          status=$(echo $json | jq '.status')
          if [ $status == "0" ]; then
          packageVersionId=$(echo $json | jq -r '.result.SubscriberPackageVersionId')
          echo "::set-output name=packageVersionId::$packageVersionId" >> $GITHUB_OUTPUT
          else
          echo "sf package creation failed"
          fi
          exit $status
        
      # Wait for package replication
      - name: 'Wait for package replication'
        run: sleep 360s
 
      # Create scratch org
      - name: 'Create scratch org'
        run: sf org create scratch -f config/project-scratch-def.json -a scratch-org -d -y 1

      # Install new package in scratch org
      - name: 'Install new package version in scratch org'
        run: sf package install -p ${{ steps.createPackageVersion.outputs.packageVersionId }} -w 10 -o scratch-org -r

      #Delete Scratch Org
      - name: 'Delete Scratch Org'
        run: sf org delete scratch -p -o scratch-org